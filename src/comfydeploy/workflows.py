"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from comfydeploy import utils
from comfydeploy._hooks import HookContext
from comfydeploy.models import components, errors, operations
from comfydeploy.types import BaseModel, OptionalNullable, UNSET
from typing import Any, List, Optional, Union, cast

class Workflows(BaseSDK):
    
    
    def post_machine_endpoint(
        self, *,
        request: Optional[Union[operations.PostMachineEndpointRequestBody, operations.PostMachineEndpointRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostMachineEndpointResponse:
        r"""Create an endpoint for a machine

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostMachineEndpointRequestBody)
        request = cast(operations.PostMachineEndpointRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/machine-endpoint",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostMachineEndpointRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="post_/machine-endpoint", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostMachineEndpointResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostMachineEndpointResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostMachineEndpointResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostMachineEndpointResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def post_machine_endpoint_async(
        self, *,
        request: Optional[Union[operations.PostMachineEndpointRequestBody, operations.PostMachineEndpointRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostMachineEndpointResponse:
        r"""Create an endpoint for a machine

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostMachineEndpointRequestBody)
        request = cast(operations.PostMachineEndpointRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/machine-endpoint",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostMachineEndpointRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="post_/machine-endpoint", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostMachineEndpointResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostMachineEndpointResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostMachineEndpointResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostMachineEndpointResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def get_all(
        self, *,
        page: Optional[str] = "1",
        page_size: Optional[str] = "12",
        search: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsResponse:
        r"""Retrieve workflows

        Retrieve workflows based on optional query parameters

        :param page: 
        :param page_size: 
        :param search: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1WorkflowsRequest(
            page=page,
            page_size=page_size,
            search=search,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/v1/workflows", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsResponse(response_bodies=utils.unmarshal_json(http_res.text, Optional[List[operations.GetV1WorkflowsResponseBody]]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def get_all_async(
        self, *,
        page: Optional[str] = "1",
        page_size: Optional[str] = "12",
        search: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsResponse:
        r"""Retrieve workflows

        Retrieve workflows based on optional query parameters

        :param page: 
        :param page_size: 
        :param search: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1WorkflowsRequest(
            page=page,
            page_size=page_size,
            search=search,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/v1/workflows", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsResponse(response_bodies=utils.unmarshal_json(http_res.text, Optional[List[operations.GetV1WorkflowsResponseBody]]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def create(
        self, *,
        request: Optional[Union[operations.PostV1WorkflowsRequestBody, operations.PostV1WorkflowsRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostV1WorkflowsResponse:
        r"""Create a new workflow

        Create a new workflow by analyzing the provided workflow JSON

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostV1WorkflowsRequestBody)
        request = cast(operations.PostV1WorkflowsRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/v1/workflows",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostV1WorkflowsRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="post_/v1/workflows", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostV1WorkflowsResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostV1WorkflowsResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostV1WorkflowsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostV1WorkflowsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def create_async(
        self, *,
        request: Optional[Union[operations.PostV1WorkflowsRequestBody, operations.PostV1WorkflowsRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostV1WorkflowsResponse:
        r"""Create a new workflow

        Create a new workflow by analyzing the provided workflow JSON

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostV1WorkflowsRequestBody)
        request = cast(operations.PostV1WorkflowsRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/v1/workflows",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostV1WorkflowsRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="post_/v1/workflows", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostV1WorkflowsResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostV1WorkflowsResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostV1WorkflowsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostV1WorkflowsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def get(
        self, *,
        workflow_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsWorkflowIDResponse:
        r"""Retrieve a specific workflow by ID

        Retrieve the latest version of a specific workflow by its ID

        :param workflow_id: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1WorkflowsWorkflowIDRequest(
            workflow_id=workflow_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows/{workflow_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/v1/workflows/{workflow_id}", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsWorkflowIDResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1WorkflowsWorkflowIDResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsWorkflowIDResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsWorkflowIDResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def get_async(
        self, *,
        workflow_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsWorkflowIDResponse:
        r"""Retrieve a specific workflow by ID

        Retrieve the latest version of a specific workflow by its ID

        :param workflow_id: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1WorkflowsWorkflowIDRequest(
            workflow_id=workflow_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows/{workflow_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/v1/workflows/{workflow_id}", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsWorkflowIDResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1WorkflowsWorkflowIDResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsWorkflowIDResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsWorkflowIDResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def get_outputs(
        self, *,
        request: Union[operations.GetV1WorkflowsWorkflowIDOutputsRequest, operations.GetV1WorkflowsWorkflowIDOutputsRequestTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsWorkflowIDOutputsResponse:
        r"""Retrieve the most recent outputs for a workflow

        Retrieve the latest version of a specific workflow by its ID

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetV1WorkflowsWorkflowIDOutputsRequest)
        request = cast(operations.GetV1WorkflowsWorkflowIDOutputsRequest, request)
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows/{workflow_id}/outputs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/v1/workflows/{workflow_id}/outputs", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsWorkflowIDOutputsResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1WorkflowsWorkflowIDOutputsResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsWorkflowIDOutputsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsWorkflowIDOutputsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def get_outputs_async(
        self, *,
        request: Union[operations.GetV1WorkflowsWorkflowIDOutputsRequest, operations.GetV1WorkflowsWorkflowIDOutputsRequestTypedDict],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1WorkflowsWorkflowIDOutputsResponse:
        r"""Retrieve the most recent outputs for a workflow

        Retrieve the latest version of a specific workflow by its ID

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.GetV1WorkflowsWorkflowIDOutputsRequest)
        request = cast(operations.GetV1WorkflowsWorkflowIDOutputsRequest, request)
        
        req = self.build_request(
            method="GET",
            path="/v1/workflows/{workflow_id}/outputs",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/v1/workflows/{workflow_id}/outputs", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1WorkflowsWorkflowIDOutputsResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1WorkflowsWorkflowIDOutputsResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1WorkflowsWorkflowIDOutputsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1WorkflowsWorkflowIDOutputsResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
