"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel, Nullable, UNSET_SENTINEL
from comfydeploy.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Status(str, Enum):
    RUNNING = "running"
    COMPLETED = "completed"

class GetMachineMachineIDEventsRequestTypedDict(TypedDict):
    machine_id: str
    status: Status
    limit: NotRequired[float]
    

class GetMachineMachineIDEventsRequest(BaseModel):
    machine_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    status: Annotated[Status, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    limit: Annotated[Optional[float], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    

class GetMachineMachineIDEventsGpu(str, Enum):
    T4 = "T4"
    L4 = "L4"
    A10_G = "A10G"
    A100 = "A100"
    A100_80_GB = "A100-80GB"
    H100 = "H100"

class WsGpu(str, Enum):
    FOUR_THOUSAND_AND_NINETY = "4090"

class ProviderType(str, Enum):
    MODAL = "modal"
    RUNPOD = "runpod"

class GetMachineMachineIDEventsResponseBodyTypedDict(TypedDict):
    id: str
    user_id: str
    org_id: Nullable[str]
    machine_id: Nullable[str]
    start_time: Nullable[str]
    end_time: Nullable[str]
    gpu: Nullable[GetMachineMachineIDEventsGpu]
    ws_gpu: Nullable[WsGpu]
    provider_type: ProviderType
    created_at: str
    updated_at: str
    

class GetMachineMachineIDEventsResponseBody(BaseModel):
    id: str
    user_id: str
    org_id: Nullable[str]
    machine_id: Nullable[str]
    start_time: Nullable[str]
    end_time: Nullable[str]
    gpu: Nullable[GetMachineMachineIDEventsGpu]
    ws_gpu: Nullable[WsGpu]
    provider_type: Annotated[ProviderType, pydantic.Field(alias="providerType")]
    created_at: str
    updated_at: str
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["org_id", "machine_id", "start_time", "end_time", "gpu", "ws_gpu"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class GetMachineMachineIDEventsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    response_bodies: NotRequired[List[GetMachineMachineIDEventsResponseBodyTypedDict]]
    r"""Recent gpu events"""
    

class GetMachineMachineIDEventsResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    response_bodies: Optional[List[GetMachineMachineIDEventsResponseBody]] = None
    r"""Recent gpu events"""
    
