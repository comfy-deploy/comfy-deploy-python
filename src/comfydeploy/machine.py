"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from comfydeploy import utils
from comfydeploy._hooks import HookContext
from comfydeploy.models import components, errors, operations
from comfydeploy.types import BaseModel, OptionalNullable, UNSET
from typing import Any, List, Optional, Union, cast

class Machine(BaseSDK):
    
    
    def post_gpu_event(
        self, *,
        request: Optional[Union[operations.PostGpuEventRequestBody, operations.PostGpuEventRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostGpuEventResponse:
        r"""Register a machine event

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostGpuEventRequestBody)
        request = cast(operations.PostGpuEventRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/gpu_event",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostGpuEventRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="post_/gpu_event", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostGpuEventResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostGpuEventResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostGpuEventResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostGpuEventResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def post_gpu_event_async(
        self, *,
        request: Optional[Union[operations.PostGpuEventRequestBody, operations.PostGpuEventRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostGpuEventResponse:
        r"""Register a machine event

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostGpuEventRequestBody)
        request = cast(operations.PostGpuEventRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/gpu_event",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostGpuEventRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="post_/gpu_event", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostGpuEventResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostGpuEventResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostGpuEventResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostGpuEventResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def list_events(
        self, *,
        machine_id: str,
        status: operations.Status,
        limit: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetMachineMachineIDEventsResponse:
        r"""Get recent gpu events

        :param machine_id: 
        :param status: 
        :param limit: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetMachineMachineIDEventsRequest(
            machine_id=machine_id,
            status=status,
            limit=limit,
        )
        
        req = self.build_request(
            method="GET",
            path="/machine/{machine_id}/events",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/machine/{machine_id}/events", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetMachineMachineIDEventsResponse(response_bodies=utils.unmarshal_json(http_res.text, Optional[List[operations.GetMachineMachineIDEventsResponseBody]]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetMachineMachineIDEventsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetMachineMachineIDEventsResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def list_events_async(
        self, *,
        machine_id: str,
        status: operations.Status,
        limit: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetMachineMachineIDEventsResponse:
        r"""Get recent gpu events

        :param machine_id: 
        :param status: 
        :param limit: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetMachineMachineIDEventsRequest(
            machine_id=machine_id,
            status=status,
            limit=limit,
        )
        
        req = self.build_request(
            method="GET",
            path="/machine/{machine_id}/events",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/machine/{machine_id}/events", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["401","4XX","500","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetMachineMachineIDEventsResponse(response_bodies=utils.unmarshal_json(http_res.text, Optional[List[operations.GetMachineMachineIDEventsResponseBody]]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        if utils.match_response(http_res, "500", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetMachineMachineIDEventsResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetMachineMachineIDEventsResponseBody(data=data)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def get_v1_machines(
        self, *,
        page: Optional[str] = "1",
        page_size: Optional[str] = "12",
        fields: Optional[operations.Fields] = operations.Fields.MINIMAL,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1MachinesResponse:
        r"""Retrieve all machines for a user

        Retrieve details of all machines for the authenticated user, with pagination and optional field selection

        :param page: 
        :param page_size: 
        :param fields: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1MachinesRequest(
            page=page,
            page_size=page_size,
            fields=fields,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/machines",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/v1/machines", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1MachinesResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1MachinesResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1MachinesResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1MachinesResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def get_v1_machines_async(
        self, *,
        page: Optional[str] = "1",
        page_size: Optional[str] = "12",
        fields: Optional[operations.Fields] = operations.Fields.MINIMAL,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1MachinesResponse:
        r"""Retrieve all machines for a user

        Retrieve details of all machines for the authenticated user, with pagination and optional field selection

        :param page: 
        :param page_size: 
        :param fields: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1MachinesRequest(
            page=page,
            page_size=page_size,
            fields=fields,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/machines",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/v1/machines", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1MachinesResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1MachinesResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1MachinesResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1MachinesResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def post_v1_machines(
        self, *,
        request: Optional[Union[operations.PostV1MachinesRequestBody, operations.PostV1MachinesRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostV1MachinesResponse:
        r"""Create a new machine

        Create a new machine with optional default setting

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostV1MachinesRequestBody)
        request = cast(operations.PostV1MachinesRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/v1/machines",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostV1MachinesRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="post_/v1/machines", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostV1MachinesResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostV1MachinesResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostV1MachinesResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostV1MachinesResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def post_v1_machines_async(
        self, *,
        request: Optional[Union[operations.PostV1MachinesRequestBody, operations.PostV1MachinesRequestBodyTypedDict]] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.PostV1MachinesResponse:
        r"""Create a new machine

        Create a new machine with optional default setting

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel) and request is not None:
            request = utils.unmarshal(request, operations.PostV1MachinesRequestBody)
        request = cast(operations.PostV1MachinesRequestBody, request)
        
        req = self.build_request(
            method="POST",
            path="/v1/machines",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[operations.PostV1MachinesRequestBody]),
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="post_/v1/machines", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.PostV1MachinesResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.PostV1MachinesResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.PostV1MachinesResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.PostV1MachinesResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    def get_v1_machines_machine_id_(
        self, *,
        machine_id: str,
        ext_urls: Optional[str] = "false",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1MachinesMachineIDResponse:
        r"""Retrieve a specific machine by ID

        Retrieve details of a specific machine by its ID, with optional workspace details

        :param machine_id: 
        :param ext_urls: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1MachinesMachineIDRequest(
            machine_id=machine_id,
            ext_urls=ext_urls,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/machines/{machine_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="get_/v1/machines/{machine_id}", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1MachinesMachineIDResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1MachinesMachineIDResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1MachinesMachineIDResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1MachinesMachineIDResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
    
    async def get_v1_machines_machine_id__async(
        self, *,
        machine_id: str,
        ext_urls: Optional[str] = "false",
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.GetV1MachinesMachineIDResponse:
        r"""Retrieve a specific machine by ID

        Retrieve details of a specific machine by its ID, with optional workspace details

        :param machine_id: 
        :param ext_urls: 
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms
        
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetV1MachinesMachineIDRequest(
            machine_id=machine_id,
            ext_urls=ext_urls,
        )
        
        req = self.build_request(
            method="GET",
            path="/v1/machines/{machine_id}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "429",
                "500",
                "502",
                "503",
                "504"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="get_/v1/machines/{machine_id}", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","4XX","5XX"],
            retry_config=retry_config
        )
        
        data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return operations.GetV1MachinesMachineIDResponse(object=utils.unmarshal_json(http_res.text, Optional[operations.GetV1MachinesMachineIDResponseBody]), http_meta=components.HTTPMetadata(request=req, response=http_res))
        if utils.match_response(http_res, "400", "application/json"):
            data = utils.unmarshal_json(http_res.text, errors.GetV1MachinesMachineIDResponseBodyData)
            data.http_meta = components.HTTPMetadata(request=req, response=http_res)
            raise errors.GetV1MachinesMachineIDResponseBody(data=data)
        if utils.match_response(http_res, ["401","4XX","5XX"], "*"):
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)

    
