"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import (
    deploymentenvironment as components_deploymentenvironment,
    deploymentmodel as components_deploymentmodel,
    httpmetadata as components_httpmetadata,
)
from comfydeploy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from comfydeploy.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetDeploymentsDeploymentsGetRequestTypedDict(TypedDict):
    environment: NotRequired[
        Nullable[components_deploymentenvironment.DeploymentEnvironment]
    ]


class GetDeploymentsDeploymentsGetRequest(BaseModel):
    environment: Annotated[
        OptionalNullable[components_deploymentenvironment.DeploymentEnvironment],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["environment"]
        nullable_fields = ["environment"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetDeploymentsDeploymentsGetResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    response_get_deployments_deployments_get: NotRequired[
        List[components_deploymentmodel.DeploymentModelTypedDict]
    ]
    r"""Successful Response"""


class GetDeploymentsDeploymentsGetResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    response_get_deployments_deployments_get: Optional[
        List[components_deploymentmodel.DeploymentModel]
    ] = None
    r"""Successful Response"""
