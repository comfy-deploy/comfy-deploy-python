"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GpuType(str, Enum):
    T4 = "T4"
    L4 = "L4"
    A10_G = "A10G"
    A100 = "A100"
    A100_80_GB = "A100-80GB"
    H100 = "H100"

class WsGpuType(str, Enum):
    FOUR_THOUSAND_AND_NINETY = "4090"

class EventType(str, Enum):
    GPU_START = "gpu_start"
    GPU_END = "gpu_end"

class GpuProvider(str, Enum):
    MODAL = "modal"
    RUNPOD = "runpod"

class PostGpuEventRequestBodyTypedDict(TypedDict):
    machine_id: str
    timestamp: str
    event_type: EventType
    gpu_provider: GpuProvider
    gpu_type: NotRequired[Nullable[GpuType]]
    ws_gpu_type: NotRequired[Nullable[WsGpuType]]
    event_id: NotRequired[Nullable[str]]
    is_workspace: NotRequired[Nullable[bool]]
    user_id: NotRequired[Nullable[str]]
    org_id: NotRequired[Nullable[str]]
    

class PostGpuEventRequestBody(BaseModel):
    machine_id: str
    timestamp: str
    event_type: Annotated[EventType, pydantic.Field(alias="eventType")]
    gpu_provider: GpuProvider
    gpu_type: Annotated[OptionalNullable[GpuType], pydantic.Field(alias="gpuType")] = UNSET
    ws_gpu_type: Annotated[OptionalNullable[WsGpuType], pydantic.Field(alias="wsGpuType")] = UNSET
    event_id: OptionalNullable[str] = UNSET
    is_workspace: OptionalNullable[bool] = UNSET
    user_id: OptionalNullable[str] = UNSET
    org_id: OptionalNullable[str] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["gpuType", "wsGpuType", "event_id", "is_workspace", "user_id", "org_id"]
        nullable_fields = ["gpuType", "wsGpuType", "event_id", "is_workspace", "user_id", "org_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class PostGpuEventResponseBodyTypedDict(TypedDict):
    r"""Machine event registered"""
    
    event_id: str
    

class PostGpuEventResponseBody(BaseModel):
    r"""Machine event registered"""
    
    event_id: str
    

class PostGpuEventResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    object: NotRequired[PostGpuEventResponseBodyTypedDict]
    r"""Machine event registered"""
    

class PostGpuEventResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    object: Optional[PostGpuEventResponseBody] = None
    r"""Machine event registered"""
    
