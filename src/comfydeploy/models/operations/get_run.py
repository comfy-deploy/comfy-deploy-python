"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from comfydeploy.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetRunRequestTypedDict(TypedDict):
    run_id: str
    

class GetRunRequest(BaseModel):
    run_id: Annotated[str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))]
    

class WorkflowInputsTypedDict(TypedDict):
    pass
    

class WorkflowInputs(BaseModel):
    pass
    

class GetRunWorkflowAPITypedDict(TypedDict):
    pass
    

class GetRunWorkflowAPI(BaseModel):
    pass
    

class Origin(str, Enum):
    MANUAL = "manual"
    API = "api"
    PUBLIC_SHARE = "public-share"
    PUBLIC_TEMPLATE = "public-template"
    WORKSPACE = "workspace"

class GetRunStatus(str, Enum):
    NOT_STARTED = "not-started"
    RUNNING = "running"
    UPLOADING = "uploading"
    SUCCESS = "success"
    FAILED = "failed"
    STARTED = "started"
    QUEUED = "queued"
    TIMEOUT = "timeout"
    CANCELLED = "cancelled"

class GetRunGpu(str, Enum):
    T4 = "T4"
    L4 = "L4"
    A10_G = "A10G"
    A100 = "A100"
    A100_80_GB = "A100-80GB"
    H100 = "H100"

class MachineType(str, Enum):
    CLASSIC = "classic"
    RUNPOD_SERVERLESS = "runpod-serverless"
    MODAL_SERVERLESS = "modal-serverless"
    COMFY_DEPLOY_SERVERLESS = "comfy-deploy-serverless"
    WORKSPACE = "workspace"
    WORKSPACE_V2 = "workspace-v2"

class RunLogTypedDict(TypedDict):
    pass
    

class RunLog(BaseModel):
    pass
    

class WebhookStatus(str, Enum):
    SUCCESS = "success"
    FAILED = "failed"
    NOT_STARTED = "not-started"
    RUNNING = "running"

class ImagesTypedDict(TypedDict):
    url: str
    filename: str
    

class Images(BaseModel):
    url: str
    filename: str
    

class GetRunFilesTypedDict(TypedDict):
    url: str
    filename: str
    

class GetRunFiles(BaseModel):
    url: str
    filename: str
    

class GifsTypedDict(TypedDict):
    url: str
    filename: str
    

class Gifs(BaseModel):
    url: str
    filename: str
    

class DataTypedDict(TypedDict):
    images: NotRequired[List[ImagesTypedDict]]
    files: NotRequired[List[GetRunFilesTypedDict]]
    gifs: NotRequired[List[GifsTypedDict]]
    text: NotRequired[List[str]]
    

class Data(BaseModel):
    images: Optional[List[Images]] = None
    files: Optional[List[GetRunFiles]] = None
    gifs: Optional[List[Gifs]] = None
    text: Optional[List[str]] = None
    

class OutputsTypedDict(TypedDict):
    data: DataTypedDict
    

class Outputs(BaseModel):
    data: Data
    

class GetRunResponseBodyTypedDict(TypedDict):
    r"""Retrieve the output"""
    
    id: str
    workflow_version_id: Nullable[str]
    workflow_inputs: Nullable[WorkflowInputsTypedDict]
    workflow_id: Nullable[str]
    machine_id: Nullable[str]
    origin: Origin
    status: GetRunStatus
    ended_at: Nullable[str]
    created_at: str
    updated_at: str
    queued_at: Nullable[str]
    started_at: Nullable[str]
    gpu_event_id: Nullable[str]
    gpu: Nullable[GetRunGpu]
    machine_version: Nullable[str]
    machine_type: Nullable[MachineType]
    modal_function_call_id: Nullable[str]
    user_id: Nullable[str]
    org_id: Nullable[str]
    live_status: Nullable[str]
    progress: float
    is_realtime: bool
    webhook: Nullable[str]
    webhook_status: Nullable[WebhookStatus]
    webhook_intermediate_status: bool
    batch_id: Nullable[str]
    favorite: bool
    workflow_api: NotRequired[Nullable[GetRunWorkflowAPITypedDict]]
    run_log: NotRequired[RunLogTypedDict]
    outputs: NotRequired[Nullable[List[OutputsTypedDict]]]
    

class GetRunResponseBody(BaseModel):
    r"""Retrieve the output"""
    
    id: str
    workflow_version_id: Nullable[str]
    workflow_inputs: Nullable[WorkflowInputs]
    workflow_id: Nullable[str]
    machine_id: Nullable[str]
    origin: Origin
    status: GetRunStatus
    ended_at: Nullable[str]
    created_at: str
    updated_at: str
    queued_at: Nullable[str]
    started_at: Nullable[str]
    gpu_event_id: Nullable[str]
    gpu: Nullable[GetRunGpu]
    machine_version: Nullable[str]
    machine_type: Nullable[MachineType]
    modal_function_call_id: Nullable[str]
    user_id: Nullable[str]
    org_id: Nullable[str]
    live_status: Nullable[str]
    progress: float
    is_realtime: bool
    webhook: Nullable[str]
    webhook_status: Nullable[WebhookStatus]
    webhook_intermediate_status: bool
    batch_id: Nullable[str]
    favorite: bool
    workflow_api: OptionalNullable[GetRunWorkflowAPI] = UNSET
    run_log: Optional[RunLog] = None
    outputs: OptionalNullable[List[Outputs]] = UNSET
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["workflow_api", "run_log", "outputs"]
        nullable_fields = ["workflow_version_id", "workflow_inputs", "workflow_id", "machine_id", "ended_at", "queued_at", "started_at", "gpu_event_id", "gpu", "machine_version", "machine_type", "modal_function_call_id", "user_id", "org_id", "live_status", "webhook", "webhook_status", "batch_id", "workflow_api", "outputs"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class GetRunResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    object: NotRequired[GetRunResponseBodyTypedDict]
    r"""Retrieve the output"""
    

class GetRunResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    object: Optional[GetRunResponseBody] = None
    r"""Retrieve the output"""
    
