"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .createrunresponse import CreateRunResponse, CreateRunResponseTypedDict
    from .deploymentrunrequest import (
        DeploymentRunRequest,
        DeploymentRunRequestTypedDict,
        Gpu,
        Inputs,
        InputsTypedDict,
    )
    from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
    from .mediaitem import MediaItem, MediaItemTypedDict
    from .security import Security, SecurityTypedDict
    from .validationerror import (
        Loc,
        LocTypedDict,
        ValidationError,
        ValidationErrorTypedDict,
    )
    from .workflowrunmodel import WorkflowRunModel, WorkflowRunModelTypedDict
    from .workflowrunoutputmodel import (
        Data,
        DataTypedDict,
        WorkflowRunOutputModel,
        WorkflowRunOutputModelTypedDict,
    )
    from .workflowrunstatus import WorkflowRunStatus
    from .workflowrunwebhookbody import (
        WorkflowRunWebhookBody,
        WorkflowRunWebhookBodyTypedDict,
    )
    from .workflowrunwebhookresponse import (
        WorkflowRunWebhookResponse,
        WorkflowRunWebhookResponseTypedDict,
    )

__all__ = [
    "CreateRunResponse",
    "CreateRunResponseTypedDict",
    "Data",
    "DataTypedDict",
    "DeploymentRunRequest",
    "DeploymentRunRequestTypedDict",
    "Gpu",
    "HTTPMetadata",
    "HTTPMetadataTypedDict",
    "Inputs",
    "InputsTypedDict",
    "Loc",
    "LocTypedDict",
    "MediaItem",
    "MediaItemTypedDict",
    "Security",
    "SecurityTypedDict",
    "ValidationError",
    "ValidationErrorTypedDict",
    "WorkflowRunModel",
    "WorkflowRunModelTypedDict",
    "WorkflowRunOutputModel",
    "WorkflowRunOutputModelTypedDict",
    "WorkflowRunStatus",
    "WorkflowRunWebhookBody",
    "WorkflowRunWebhookBodyTypedDict",
    "WorkflowRunWebhookResponse",
    "WorkflowRunWebhookResponseTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "CreateRunResponse": ".createrunresponse",
    "CreateRunResponseTypedDict": ".createrunresponse",
    "DeploymentRunRequest": ".deploymentrunrequest",
    "DeploymentRunRequestTypedDict": ".deploymentrunrequest",
    "Gpu": ".deploymentrunrequest",
    "Inputs": ".deploymentrunrequest",
    "InputsTypedDict": ".deploymentrunrequest",
    "HTTPMetadata": ".httpmetadata",
    "HTTPMetadataTypedDict": ".httpmetadata",
    "MediaItem": ".mediaitem",
    "MediaItemTypedDict": ".mediaitem",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "Loc": ".validationerror",
    "LocTypedDict": ".validationerror",
    "ValidationError": ".validationerror",
    "ValidationErrorTypedDict": ".validationerror",
    "WorkflowRunModel": ".workflowrunmodel",
    "WorkflowRunModelTypedDict": ".workflowrunmodel",
    "Data": ".workflowrunoutputmodel",
    "DataTypedDict": ".workflowrunoutputmodel",
    "WorkflowRunOutputModel": ".workflowrunoutputmodel",
    "WorkflowRunOutputModelTypedDict": ".workflowrunoutputmodel",
    "WorkflowRunStatus": ".workflowrunstatus",
    "WorkflowRunWebhookBody": ".workflowrunwebhookbody",
    "WorkflowRunWebhookBodyTypedDict": ".workflowrunwebhookbody",
    "WorkflowRunWebhookResponse": ".workflowrunwebhookresponse",
    "WorkflowRunWebhookResponseTypedDict": ".workflowrunwebhookresponse",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
