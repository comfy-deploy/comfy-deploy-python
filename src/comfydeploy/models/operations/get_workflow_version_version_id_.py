"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel, Nullable, UNSET_SENTINEL
from comfydeploy.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import Any, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetWorkflowVersionVersionIDRequestTypedDict(TypedDict):
    version_id: str
    

class GetWorkflowVersionVersionIDRequest(BaseModel):
    version_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    

class GetWorkflowVersionVersionIDResponseBodyTypedDict(TypedDict):
    r"""Retrieve the output"""
    
    workflow_id: str
    id: str
    user_id: Nullable[str]
    comment: Nullable[str]
    version: float
    created_at: str
    updated_at: str
    workflow: NotRequired[Any]
    workflow_api: NotRequired[Any]
    snapshot: NotRequired[Any]
    dependencies: NotRequired[Any]
    

class GetWorkflowVersionVersionIDResponseBody(BaseModel):
    r"""Retrieve the output"""
    
    workflow_id: str
    id: str
    user_id: Nullable[str]
    comment: Nullable[str]
    version: float
    created_at: str
    updated_at: str
    workflow: Optional[Any] = None
    workflow_api: Optional[Any] = None
    snapshot: Optional[Any] = None
    dependencies: Optional[Any] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["workflow", "workflow_api", "snapshot", "dependencies"]
        nullable_fields = ["user_id", "comment"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class GetWorkflowVersionVersionIDResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    object: NotRequired[GetWorkflowVersionVersionIDResponseBodyTypedDict]
    r"""Retrieve the output"""
    

class GetWorkflowVersionVersionIDResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    object: Optional[GetWorkflowVersionVersionIDResponseBody] = None
    r"""Retrieve the output"""
    
