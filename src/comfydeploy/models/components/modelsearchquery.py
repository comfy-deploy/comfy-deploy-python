"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class ModelSearchQueryTypedDict(TypedDict):
    name: NotRequired[str]
    type: NotRequired[Nullable[str]]
    provider: NotRequired[str]
    filename: NotRequired[str]
    save_path: NotRequired[str]
    size: NotRequired[Nullable[int]]
    download_url: NotRequired[str]
    reference_url: NotRequired[str]


class ModelSearchQuery(BaseModel):
    name: Optional[str] = None

    type: OptionalNullable[str] = UNSET

    provider: Optional[str] = None

    filename: Optional[str] = None

    save_path: Optional[str] = None

    size: OptionalNullable[int] = UNSET

    download_url: Optional[str] = None

    reference_url: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "name",
            "type",
            "provider",
            "filename",
            "save_path",
            "size",
            "download_url",
            "reference_url",
        ]
        nullable_fields = ["type", "size"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
