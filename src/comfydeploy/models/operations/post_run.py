"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from comfydeploy import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Any, Dict, Optional, Union


class Gpu(str, Enum):
    T4 = 'T4'
    L4 = 'L4'
    A10_G = 'A10G'
    A100 = 'A100'
    H100 = 'H100'


class RunOrigin(str, Enum):
    MANUAL = 'manual'
    API = 'api'
    PUBLIC_SHARE = 'public-share'
    PUBLIC_TEMPLATE = 'public-template'
    WORKSPACE = 'workspace'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostRunRequestBody:
    r"""Run options"""
    UNSET='__SPEAKEASY_UNSET__'
    deployment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment_id'), 'exclude': lambda f: f is None }})
    r"""Deployment ID to run"""
    workflow_api: Optional[Any] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_api'), 'exclude': lambda f: f is PostRunRequestBody.UNSET }})
    r"""Workflow API JSON to run"""
    workflow_api_json: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_api_json'), 'exclude': lambda f: f is None }})
    r"""Workflow API JSON to run"""
    workflow_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_id'), 'exclude': lambda f: f is None }})
    r"""Workflow ID to run"""
    machine_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('machine_id'), 'exclude': lambda f: f is None }})
    gpu: Optional[Gpu] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpu'), 'exclude': lambda f: f is None }})
    concurrency_limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrency_limit'), 'exclude': lambda f: f is None }})
    private_volume_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_volume_name'), 'exclude': lambda f: f is None }})
    timeout: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})
    run_origin: Optional[RunOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_origin'), 'exclude': lambda f: f is None }})
    inputs: Optional[Dict[str, Inputs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputs'), 'exclude': lambda f: f is None }})
    r"""External inputs to the workflow"""
    inputs_json: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputs_json'), 'exclude': lambda f: f is None }})
    r"""External inputs to the workflow in JSON format"""
    webhook: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook'), 'exclude': lambda f: f is None }})
    r"""Webhook URL to receive workflow updates"""
    stream: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream'), 'exclude': lambda f: f is None }})
    r"""Whether to return a streaming url"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostRunResponseBody:
    r"""Workflow queued"""
    run_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_id') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostRunResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field(metadata={'dataclasses_json': { 'exclude': lambda f: True }})
    object: Optional[PostRunResponseBody] = dataclasses.field(default=None)
    r"""Workflow queued"""
    


Inputs = Union[str, float]
