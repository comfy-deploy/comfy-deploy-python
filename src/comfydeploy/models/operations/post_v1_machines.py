"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class PostV1MachinesRequestBodyTypedDict(TypedDict):
    default_machine: NotRequired[bool]
    

class PostV1MachinesRequestBody(BaseModel):
    default_machine: Optional[bool] = True
    

class PostV1MachinesType(str, Enum):
    COMFY_DEPLOY_SERVERLESS = "comfy-deploy-serverless"

class PostV1MachinesStatus(str, Enum):
    BUILDING = "building"

class PostV1MachinesGpu(str, Enum):
    A10_G = "A10G"

class PostV1MachinesResponseBodyTypedDict(TypedDict):
    r"""Machine created successfully"""
    
    id: str
    user_id: str
    name: str
    org_id: Nullable[str]
    endpoint: str
    created_at: str
    updated_at: str
    disabled: bool
    type: PostV1MachinesType
    status: PostV1MachinesStatus
    machine_version: Nullable[str]
    machine_builder_version: str
    models: List[Any]
    gpu: PostV1MachinesGpu
    pod_id: Nullable[str]
    base_docker_image: Nullable[str]
    allow_concurrent_inputs: float
    concurrency_limit: float
    legacy_mode: bool
    ws_timeout: float
    run_timeout: float
    idle_timeout: float
    build_machine_instance_id: Nullable[str]
    build_log: Nullable[str]
    modal_app_id: Nullable[str]
    target_workflow_id: Nullable[str]
    install_custom_node_with_gpu: bool
    deleted: bool
    keep_warm: float
    allow_background_volume_commits: bool
    gpu_workspace: bool
    snapshot: NotRequired[Any]
    ws_gpu: NotRequired[Any]
    object_info: NotRequired[Any]
    dependencies: NotRequired[Any]
    extra_docker_commands: NotRequired[Any]
    docker_command_steps: NotRequired[Any]
    

class PostV1MachinesResponseBody(BaseModel):
    r"""Machine created successfully"""
    
    id: str
    user_id: str
    name: str
    org_id: Nullable[str]
    endpoint: str
    created_at: str
    updated_at: str
    disabled: bool
    type: PostV1MachinesType
    status: PostV1MachinesStatus
    machine_version: Nullable[str]
    machine_builder_version: str
    models: List[Any]
    gpu: PostV1MachinesGpu
    pod_id: Nullable[str]
    base_docker_image: Nullable[str]
    allow_concurrent_inputs: float
    concurrency_limit: float
    legacy_mode: bool
    ws_timeout: float
    run_timeout: float
    idle_timeout: float
    build_machine_instance_id: Nullable[str]
    build_log: Nullable[str]
    modal_app_id: Nullable[str]
    target_workflow_id: Nullable[str]
    install_custom_node_with_gpu: bool
    deleted: bool
    keep_warm: float
    allow_background_volume_commits: bool
    gpu_workspace: bool
    snapshot: Optional[Any] = None
    ws_gpu: Optional[Any] = None
    object_info: Optional[Any] = None
    dependencies: Optional[Any] = None
    extra_docker_commands: Optional[Any] = None
    docker_command_steps: Optional[Any] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["snapshot", "ws_gpu", "object_info", "dependencies", "extra_docker_commands", "docker_command_steps"]
        nullable_fields = ["org_id", "machine_version", "pod_id", "base_docker_image", "build_machine_instance_id", "build_log", "modal_app_id", "target_workflow_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
        

class PostV1MachinesResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    object: NotRequired[PostV1MachinesResponseBodyTypedDict]
    r"""Machine created successfully"""
    

class PostV1MachinesResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    object: Optional[PostV1MachinesResponseBody] = None
    r"""Machine created successfully"""
    
