"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Dict, List
from typing_extensions import NotRequired, TypedDict


class InputTypesTypedDict(TypedDict):
    pass


class InputTypes(BaseModel):
    pass


class OutputTypesTypedDict(TypedDict):
    pass


class OutputTypes(BaseModel):
    pass


class DeploymentShareModelTypedDict(TypedDict):
    id: str
    user_id: str
    org_id: Nullable[str]
    share_slug: str
    workflow: Dict[str, str]
    input_types: Nullable[List[InputTypesTypedDict]]
    output_types: Nullable[List[OutputTypesTypedDict]]
    description: NotRequired[Nullable[str]]


class DeploymentShareModel(BaseModel):
    id: str

    user_id: str

    org_id: Nullable[str]

    share_slug: str

    workflow: Dict[str, str]

    input_types: Nullable[List[InputTypes]]

    output_types: Nullable[List[OutputTypes]]

    description: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description"]
        nullable_fields = ["org_id", "input_types", "output_types", "description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
