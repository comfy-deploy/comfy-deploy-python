"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from datetime import datetime
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SessionResponseTypedDict(TypedDict):
    id: str
    r"""The session ID"""
    session_id: str
    r"""The session ID"""
    gpu_event_id: str
    r"""The GPU event ID"""
    gpu: str
    r"""The GPU type being used"""
    created_at: datetime
    r"""When the session was created"""
    url: NotRequired[Nullable[str]]
    r"""The tunnel URL for the session"""
    timeout: NotRequired[Nullable[int]]
    r"""Session timeout in minutes"""
    timeout_end: NotRequired[Nullable[datetime]]
    r"""When the session will timeout"""
    machine_id: NotRequired[Nullable[str]]
    r"""Associated machine ID"""
    machine_version_id: NotRequired[Nullable[str]]
    r"""Associated machine version ID"""
    status: NotRequired[str]
    r"""Session status"""
    user_id: NotRequired[Nullable[str]]
    r"""Associated user ID"""
    org_id: NotRequired[Nullable[str]]
    r"""Associated organization ID"""


class SessionResponse(BaseModel):
    id: str
    r"""The session ID"""

    session_id: Annotated[
        str,
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ]
    r"""The session ID"""

    gpu_event_id: str
    r"""The GPU event ID"""

    gpu: str
    r"""The GPU type being used"""

    created_at: datetime
    r"""When the session was created"""

    url: OptionalNullable[str] = UNSET
    r"""The tunnel URL for the session"""

    timeout: OptionalNullable[int] = UNSET
    r"""Session timeout in minutes"""

    timeout_end: OptionalNullable[datetime] = UNSET
    r"""When the session will timeout"""

    machine_id: OptionalNullable[str] = UNSET
    r"""Associated machine ID"""

    machine_version_id: OptionalNullable[str] = UNSET
    r"""Associated machine version ID"""

    status: Optional[str] = "running"
    r"""Session status"""

    user_id: OptionalNullable[str] = UNSET
    r"""Associated user ID"""

    org_id: OptionalNullable[str] = UNSET
    r"""Associated organization ID"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "url",
            "timeout",
            "timeout_end",
            "machine_id",
            "machine_version_id",
            "status",
            "user_id",
            "org_id",
        ]
        nullable_fields = [
            "url",
            "timeout",
            "timeout_end",
            "machine_id",
            "machine_version_id",
            "user_id",
            "org_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
