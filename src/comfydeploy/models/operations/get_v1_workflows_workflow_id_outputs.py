"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from comfydeploy.models.components import httpmetadata as components_httpmetadata
from comfydeploy.types import BaseModel
from comfydeploy.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class QueryParamRunOrigin(str, Enum):
    MANUAL = "manual"
    API = "api"
    PUBLIC_SHARE = "public-share"
    PUBLIC_TEMPLATE = "public-template"
    WORKSPACE = "workspace"

class GetV1WorkflowsWorkflowIDOutputsRequestTypedDict(TypedDict):
    workflow_id: str
    page: NotRequired[str]
    page_size: NotRequired[str]
    search: NotRequired[str]
    run_origin: NotRequired[QueryParamRunOrigin]
    

class GetV1WorkflowsWorkflowIDOutputsRequest(BaseModel):
    workflow_id: Annotated[str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))]
    page: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = "1"
    page_size: Annotated[Optional[str], pydantic.Field(alias="pageSize"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = "12"
    search: Annotated[Optional[str], FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    run_origin: Annotated[Optional[QueryParamRunOrigin], pydantic.Field(alias="runOrigin"), FieldMetadata(query=QueryParamMetadata(style="form", explode=True))] = None
    

class GetV1WorkflowsWorkflowIDOutputsOutputsTypedDict(TypedDict):
    file_ur_ls: List[str]
    run_id: str
    duration: float
    

class GetV1WorkflowsWorkflowIDOutputsOutputs(BaseModel):
    file_ur_ls: Annotated[List[str], pydantic.Field(alias="fileURLs")]
    run_id: Annotated[str, pydantic.Field(alias="runID")]
    duration: float
    

class GetV1WorkflowsWorkflowIDOutputsResponseBodyTypedDict(TypedDict):
    r"""Specific workflow retrieved successfully"""
    
    outputs: List[GetV1WorkflowsWorkflowIDOutputsOutputsTypedDict]
    total: float
    

class GetV1WorkflowsWorkflowIDOutputsResponseBody(BaseModel):
    r"""Specific workflow retrieved successfully"""
    
    outputs: List[GetV1WorkflowsWorkflowIDOutputsOutputs]
    total: float
    

class GetV1WorkflowsWorkflowIDOutputsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    object: NotRequired[GetV1WorkflowsWorkflowIDOutputsResponseBodyTypedDict]
    r"""Specific workflow retrieved successfully"""
    

class GetV1WorkflowsWorkflowIDOutputsResponse(BaseModel):
    http_meta: Annotated[Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)] = None
    object: Optional[GetV1WorkflowsWorkflowIDOutputsResponseBody] = None
    r"""Specific workflow retrieved successfully"""
    
