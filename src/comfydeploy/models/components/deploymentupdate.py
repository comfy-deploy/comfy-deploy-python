"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gputype import GPUType
from comfydeploy.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class DeploymentUpdateTypedDict(TypedDict):
    workflow_version_id: NotRequired[Nullable[str]]
    machine_id: NotRequired[Nullable[str]]
    machine_version_id: NotRequired[Nullable[str]]
    concurrency_limit: NotRequired[Nullable[int]]
    gpu: NotRequired[Nullable[GPUType]]
    run_timeout: NotRequired[Nullable[int]]
    idle_timeout: NotRequired[Nullable[int]]
    keep_warm: NotRequired[Nullable[int]]


class DeploymentUpdate(BaseModel):
    workflow_version_id: OptionalNullable[str] = UNSET

    machine_id: OptionalNullable[str] = UNSET

    machine_version_id: OptionalNullable[str] = UNSET

    concurrency_limit: OptionalNullable[int] = UNSET

    gpu: OptionalNullable[GPUType] = UNSET

    run_timeout: OptionalNullable[int] = UNSET

    idle_timeout: OptionalNullable[int] = UNSET

    keep_warm: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "workflow_version_id",
            "machine_id",
            "machine_version_id",
            "concurrency_limit",
            "gpu",
            "run_timeout",
            "idle_timeout",
            "keep_warm",
        ]
        nullable_fields = [
            "workflow_version_id",
            "machine_id",
            "machine_version_id",
            "concurrency_limit",
            "gpu",
            "run_timeout",
            "idle_timeout",
            "keep_warm",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
